import asyncio
# import logging
from aiogram.types import ReplyKeyboardRemove
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from database.DataBaseController import DataBase
from aiogram.filters import StateFilter
from config_data.config import Config, load_config
import random
import requests as rq

config: Config = load_config('.env')


class DeliverFood(StatesGroup):
    looking_deliveries = State()
    writing_code_word = State()


db = DataBase()

router = Router()


@router.message(Command("my_deliveries"))
async def delivers(message: types.Message, state: FSMContext):
    if db.get_delivers_from_user(message.from_user.id):
        deliver_builder = ReplyKeyboardBuilder()
        for deliver in db.get_delivers_from_user(message.from_user.id):  # get_delivers_from_user - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º—É –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∞–≤–∏—Ç—å user
            deliver_builder.add(types.KeyboardButton(text=str(deliver['id'])))
        print(db.get_delivers_from_user(message.from_user.id))
        deliver_builder.adjust(3)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ id –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ üëá",
                         reply_markup=deliver_builder.as_markup(resize_keyboard=True,
                                                                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ id –∑–∞–∫–∞–∑–∞"))
        await state.set_state(DeliverFood.looking_deliveries)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ üòâ")


@router.message(StateFilter(DeliverFood.writing_code_word),
                Command("cancel"))
async def back_from_code_word(message: types.Message, state: FSMContext):
    await state.clear()
    await delivers(message, state)


@router.message(DeliverFood.writing_code_word,
                F.text)
async def check_code_word(message: types.Message, state: FSMContext):
    id_from_state = await state.get_data()
    right_word = db.get_code_word_courier(id_from_state['courier_id'])
    if right_word == message.text:
        db.remove_order_in_couriers(id_from_state['courier_id'])

        deliver_builder = ReplyKeyboardBuilder()
        for deliver in db.get_delivers_from_user(message.from_user.id):  # db.get_delivers_from_user (db - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö;
            # get_delivers_from_user - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º—É –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∞–≤–∏—Ç—å user)
            deliver_builder.add(types.KeyboardButton(text=str(deliver['id'])))

        deliver_builder.adjust(3)

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—Éüôè\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ—Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, —Ç–æ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ üòâ",
            reply_markup=deliver_builder.as_markup(resize_keyboard=True,
                                                   input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ id –∑–∞–∫–∞–∑–∞"))
        url = f'https://api.telegram.org/bot{config.tg_bot.token}/sendMessage'
        message_data = {
            'chat_id': id_from_state['user_id'],
            'text': "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ üòä –ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∑—ã–≤. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–ª–µ–∞—Ç—å –ø–æ —Å–∏–Ω–µ–π –∫–Ω–æ–ø–∫–µ —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
        }
        rq.post(url, json=message_data)

        await state.clear()
        await state.set_state(DeliverFood.looking_deliveries)
    else:
        await message.answer(
            "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel")


@router.message(F.text, StateFilter(DeliverFood.looking_deliveries))
async def check_order_by_userid(message: types.Message, state: FSMContext):
    if message.text in [str(i['id']) for i in db.get_delivers_from_user(message.from_user.id)]:
        user_info = None
        for i in db.get_delivers_from_user(message.from_user.id):
            if str(i['id']) == message.text:
                user_info = i
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚úÖ –î–æ—Å—Ç–∞–≤–∏–ª",
            callback_data=f"delivered {user_info['id']}"
        ))
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n\n"
                            f"–ö–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å: {user_info['name_of_to_whom']}\n"
                            f"–ö–∞–±–∏–Ω–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {user_info['office']}", reply_markup=builder.as_markup())
        await state.clear()
    else:
        deliver_builder = ReplyKeyboardBuilder()
        for deliver in db.get_delivers_from_user(
                message.from_user.id):  # db.get_delivers_from_user (db-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö; get_delivers_from_user-—Ñ—É–Ω–∫—Ü–∏—è)
            deliver_builder.add(
                types.KeyboardButton(text=str(deliver['id'])))  # –¥–æ–ø—É—Å—Ç–∏–º, deliver[0] - user_id –∫–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å

        deliver_builder.adjust(3)

        await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç!\n–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∫—É /my_deliveries")
        await state.clear()


@router.callback_query(F.data.split(' ')[0] == "delivered")
async def check_callback(callback: types.CallbackQuery, state: FSMContext):
    url = f'https://api.telegram.org/bot{config.tg_bot.token}/sendMessage'
    message_text = "–ö–æ–¥ –ø–æ–¥—Ç–≤–∞–µ—Ä–∂–¥–µ–Ω–∏—è: " + db.get_code_word_courier(callback.data.split(' ')[1])
    courier_info = db.get_courier_by_codeword(db.get_code_word_courier(callback.data.split(' ')[1]))
    if courier_info:
        message_data = {
            'chat_id': courier_info['to_whom_id'],
            'text': message_text
        }
        rq.post(url, json=message_data)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(DeliverFood.writing_code_word)
        await state.update_data(courier_id=callback.data.split(' ')[1])
        await state.update_data(user_id=courier_info['to_whom_id'])
    else:
        await callback.message.answer("–í—ã —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑! ‚úÖ\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ - /my_deliveries", reply_markup=ReplyKeyboardRemove())


@router.callback_query(F.data.split(' ')[0] == "a")
async def give_order_to_courier(callback: types.CallbackQuery):
    params = callback.data.split(' ')  # 0-a(—Ç–µ–∫—Å—Ç) 1-order_id 2-to_whom_id 3-name_of_to_whom 4-office 5-code_word
    print(db.check_courier_order_id(params[1]), params[1])
    if db.check_courier_order_id(params[1]):
        db.set_courier(params[1], callback.message.chat.id, int(params[2]), params[3], params[4], params[5])
        db.del_order(int(params[1]))
        await callback.answer()
        await callback.message.edit_text("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–º–µ—é—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_deliveries")
    else:
        await callback.message.edit_text("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–±—Ä–∞–ª –¥—Ä—É–≥–æ–π –∫—É—Ä—å–µ—Ä!")
