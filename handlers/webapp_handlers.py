from aiogram import Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardButton, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from state.UserStates import UserState
from aiogram.enums.content_type import ContentType

from database.DataBaseController import DataBase
import state.UserStates
from lexicon.lexicon import LEXICON_RU
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import default_state

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router: Router = Router()
db = DataBase()


def webAppKeyboard():  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å webapp –∫–Ω–æ–ø–∫–æ–π
    keyboard = ReplyKeyboardBuilder()  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    webAppTest = WebAppInfo(url="https://deldorenok.github.io/")  # —Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
    one_butt = KeyboardButton(text="üìã –ú–µ–Ω—é –±—É—Ñ–µ—Ç–∞", web_app=webAppTest)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
    keyboard.add(one_butt)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard.as_markup(resize_keyboard=True)


@router.message(Command('menu'))
async def menu(message: Message):
    await message.answer('–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–πüëá', reply_markup=webAppKeyboard())


@router.message(F.content_type == "web_app_data")  # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def answer(webAppMes):
    print(webAppMes)  # –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    print(webAppMes.chat.id)
    user_data = db.get_user(webAppMes.chat.id)
    order_dt = webAppMes.web_app_data.data.split(' ')
    pd_data = ["–ë–µ–∫–∫–µ–Ω", "–°–æ—Å–∏—Å–∫–∞ –≤ —Ç–µ—Å—Ç–µ", "–û—á–ø–æ—á–º–∞–∫", "–ö—Ä—É–∞—Å—Å–∞–Ω", "–ü–∏—Ü—Ü–∞"]
    for i in range(1, 6):
        if int(order_dt[i]) > db.get_food_amount(f'{pd_data[i - 1]}'):
            await webAppMes.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {pd_data[i-1]}")
            return
    if float(user_data['balance']) < float(order_dt[len(order_dt)-1]):
        await webAppMes.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤(")
    else:
        order_data = f"–ë–µ–∫–∫–µ–Ω:{order_dt[1]}—à—Ç –°–æ—Å–∏—Å–∫–∞ –≤ —Ç–µ—Å—Ç–µ:{order_dt[2]}—à—Ç –û—á–ø–æ—á–º–∞–∫:{order_dt[3]}—à—Ç –ö—Ä—É–∞—Å—Å–∞–Ω:{order_dt[4]}—à—Ç –ü–∏—Ü—Ü–∞:{order_dt[5]}—à—Ç"
        for i in range(1, 6):
            if int(order_dt[i]) <= db.get_food_amount(f'{pd_data[i - 1]}'):
                db.update_food(f'{pd_data[i - 1]}', order_dt[i]*-1)
        db.set_order(webAppMes.chat.id, '_'.join(db.get_info_from_auth_keys(webAppMes.chat.id)['name'].split(' ')), order_data, str(order_dt[0])) # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–æ —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –±–æ—Ç–∞
        print(webAppMes.chat.id, '_'.join(db.get_info_from_auth_keys(webAppMes.chat.id)['name'].split(' ')), order_data, str(order_dt[0]))
        await webAppMes.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑üòä, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –µ–≥–æ –≤–∞–º –ø–µ—Ä–µ–¥–∞—Ç—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ—Ç–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        db.update_balance(webAppMes.chat.id, -float(order_dt[len(order_dt)-1]))


    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

